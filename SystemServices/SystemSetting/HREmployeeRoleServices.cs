using PagedList;
using System;
using System.Data.SqlClient;
using System.Linq;
using System.Linq.Dynamic;
using System.Threading.Tasks;
using SystemDatabase;
using SystemInterfaces.SystemSetting;
using SystemModels.SystemSetting;
using SystemUnitOfWork.Interfaces;
using SystemUnitOfWork.UOW;

namespace SystemServices.SystemSetting
{
    public class HREmployeeRoleServices : BaseRepository<HREmployeeRole, HREmployeeRoleModel>, IHREmployeeRoleServices<HREmployeeRole>
    {
        public HREmployeeRoleServices(IUnitOfWork unitOfWork) : base(unitOfWork)
        {
            if (unitOfWork == null)
            {
                throw new ArgumentNullException("unitOfWork");
            }
        }

        public virtual async Task<IPagedList<HREmployeeRole>> GetsBySearchKey(int? pageNumber, int? pageSize, string orderingBy, string orderingDirection, string searchKey)
        {
            try
            {
                var model = await FindAllAsync(x => x.HRRoleTitle.ToUpper().Contains(searchKey.ToString().ToUpper()) || searchKey == "");
                return model.OrderBy(orderingBy + " " + orderingDirection)
                .ToPagedList((int)pageNumber, (int)pageSize);
            }
            catch (Exception exp)
            {
                throw new Exception(exp.Message);
            }
        }

        public virtual async Task<IPagedList<HREmployeeRole>> GetsByCompany(long? idHRCompany, int? pageNumber, int? pageSize, string orderingBy, string orderingDirection, string searchKey)
        {
            try
            {
                var model = await FindAllAsync(x => x.IdHRCompany == idHRCompany);
                return model.OrderBy(orderingBy + " " + orderingDirection)
                .ToPagedList((int)pageNumber, (int)pageSize);
            }
            catch (Exception exp)
            {
                throw new Exception(exp.Message);
            }
        }
        public virtual async Task<IPagedList<HREmployeeRole>> GetsByCompanyAndSearchKey(long? idHRCompany, int? pageNumber, int? pageSize, string orderingBy, string orderingDirection, string searchKey = "")
        {
            try
            {
                var model = await FindAllAsync(x => (x.IdHRCompany == idHRCompany || idHRCompany == 0) && (x.HRCompany.CompanyName.ToUpper().Contains(searchKey.ToUpper()) || x.HRRoleTitle.ToUpper().Contains(searchKey.ToString().ToUpper()) || searchKey == ""));
                return model.OrderBy(orderingBy + " " + orderingDirection)
                .ToPagedList((int)pageNumber, (int)pageSize);
            }
            catch (Exception exp)
            {
                throw new Exception(exp.Message);
            }
        }

        public bool UpdateAutomatically(int IdRole,int RoleType)
        {

            using (EAttendanceSystemDBEntities db = new EAttendanceSystemDBEntities())
            {
                db.Database.ExecuteSqlCommand("EXEC proc_AutoGeneratedPermissionRole @IdRole ,@RoleType",
                    new SqlParameter("@IdRole", IdRole),
                    new SqlParameter("@RoleType", RoleType)
                );
            }
            return true;
        }

    }
}
