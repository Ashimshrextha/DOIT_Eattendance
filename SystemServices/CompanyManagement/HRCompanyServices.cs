using PagedList;
using System;
using System.Data.SqlClient;
using System.Linq;
using System.Linq.Dynamic;
using System.Linq.Expressions;
using System.Threading.Tasks;
using SystemDatabase;
using SystemInterfaces.CompanyManagement;
using SystemModels.CompanyManagement;
using SystemUnitOfWork.Interfaces;
using SystemUnitOfWork.UOW;



namespace SystemServices.CompanyManagement
{
    public class HRCompanyServices : BaseRepository<HRCompany, HRCompanyModel>, IHRCompanyServices<HRCompany>
    {
        public HRCompanyServices(IUnitOfWork unitOfWork) : base(unitOfWork)
        {
            if (unitOfWork == null)
            {
                throw new ArgumentNullException("unitOfWork");
            }
        }

        public virtual async Task<IPagedList<HRCompany>> GetPagedList(Expression<Func<HRCompany, bool>> condition, int pageNumber, int pageSize)
        {
            try
            {
                await Task.WhenAll();
                return _dbSet.Where(condition).OrderBy(x => x.HRCompanyType.OrderBy)
                 .ToPagedList(pageNumber, pageSize);
            }
            catch (Exception exp)
            {
                throw new Exception(exp.Message);
            }
        }

        public virtual async Task<IPagedList<HRCompany>> GetsBySearchKey(long? idHRCompany, int pageNumber, int pageSize, string orderingBy, string orderingDirection, string searchKey = "")
        {
            try
            {
                await Task.WhenAll();
                return _dbSet.Where(x => x.CompanyName.ToUpper().Contains(searchKey.ToString().ToUpper()) || searchKey == "").OrderBy(orderingBy + " " + orderingDirection)
                .ToPagedList(pageNumber, pageSize);
            }
            catch (Exception exp)
            {
                throw new Exception(exp.Message);
            }
        }

        public virtual async Task<IPagedList<HRCompany>> GetsChildCompany(long? idCompany, int pageNumber, int pageSize, string orderingBy, string orderingDirection, string searchKey = "")
        {
            try
            {
                await Task.WhenAll();
                return _dbSet.Where(x => x.IdParent_HRCompany == idCompany && (x.CompanyName.ToUpper().Contains(searchKey.ToString().ToUpper()) || searchKey == "")).OrderBy(orderingBy + " " + orderingDirection)
                .ToPagedList(pageNumber, pageSize);
            }
            catch (Exception exp)
            {
                throw new Exception(exp.Message);
            }
        }

        public virtual async Task<int> GetActiveOfficeCount()
        {
            try
            {
                return await UnitOfWork.Db.Database.SqlQuery<int>("SELECT * FROM Ifc_CountActiveOffice()").FirstOrDefaultAsync();
            }
            catch (Exception exp)
            {
                throw new Exception(exp.Message);
            }
        }
        public virtual async Task<int> GetActiveOfficeCountNew()
        {
            try
            {
                return await UnitOfWork.Db.Database.SqlQuery<int>("SELECT COUNT(DISTINCT IdHRCompany) TotalActiveOffice from HREmployeeAttendanceHistory WITH(NOLOCK)").FirstOrDefaultAsync();
            }
            catch (Exception exp)
            {
                throw new Exception(exp.Message);
            }
        }
        public  string GetCompanyName(long? id)
        {
            using (EAttendanceSystemDBEntities db = new EAttendanceSystemDBEntities())
            {

                var result = db.HRCompanies.Where(x => x.Id == id).ToList();

                foreach (var item in result)
                {
                    if (result != null)
                    {
                        string npname = item.CompanyNameNP;
                        return npname;
                    }
                    else
                        return string.Empty;
                }
            }

            return string.Empty;

        }

        public bool CheckIdhremployee(long? CurrentId, long? RequestedId)
        {
            try
            {
                var active = this.UnitOfWork.Db.Set<HRCompany>().Where(x =>
                x.Id == CurrentId
                && x.Id == RequestedId
                ).ToList();
                var num = active.Count();
                if (num > 0 )
                {
                    return true;

                }
                else
                {
                    return false;

                }
            }
            catch
            {
                return false;
            }
        }
        public bool UpdateAutomatically(long id)
        {

            using (EAttendanceSystemDBEntities db = new EAttendanceSystemDBEntities())
            {
                db.Database.ExecuteSqlCommand("EXEC proc_AutoGenerated @CompanyID",
                    new SqlParameter("@CompanyID", id)
                );
            }
            return true;
        }
    }
}
